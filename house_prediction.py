# -*- coding: utf-8 -*-
"""House_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RAOM8aza7D7TxfgGjuB2HUs25NZQOieT
"""



"""Importing Dependencies"""

import numpy as np
import pandas as pd

"""Data collection and preprocessing"""

house_price_dataset = pd.read_csv('/content/boston_house_prediction.csv.csv')

house_price_dataset.head()

house_price_dataset = house_price_dataset.rename(columns={'MEDV': 'Price'})

house_price_dataset.head()

house_price_dataset.shape

house_price_dataset.describe()

"""HeatMap for correlation using Seaborn and Matplotlib"""

import seaborn as sns
import matplotlib.pyplot as plt

correlation_matrix = house_price_dataset.corr()

plt.figure(figsize=(10, 10))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".1f")
plt.title('Correlation Heatmap')
plt.show()



"""Splitting the Data

"""

X = house_price_dataset.drop(columns = 'Price',axis=1)
Y = house_price_dataset['Price']

print(X)

print(Y)

"""Slpitting the data into training and test data"""

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=2)



"""Model Training XGBOOST REGRESSION"""

from xgboost import XGBRegressor

model = XGBRegressor()
model.fit(X_train,Y_train)

"""Model Evaluation
1) R square error
2) Mean absolute error
"""

#Prediction on training data
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error

training_data_prediction = model.predict(X_train)

mse = mean_squared_error(Y_train,training_data_prediction)
print("Mean Squared Error of training data:", mse)

test_data_prediction = model.predict(X_test)

mse = mean_squared_error(Y_test,test_data_prediction)
print("Mean Squared Error of test data:", mse)

training_data_prediction = model.predict(X_train)

mse = mean_absolute_error(Y_train,training_data_prediction)
print("Mean Absolute Error of t data:", mse)

test_data_prediction = model.predict(X_test)

mse = mean_absolute_error(Y_test,test_data_prediction)
print("Mean Absolute Error of test data:", mse)

"""Plot Graph on Actual vs Predicted prices"""

plt.figure(figsize=(6,4))
plt.scatter(Y_test, test_data_prediction, color='blue', label='Actual vs. Predicted')
plt.xlabel('Actual House Price')
plt.ylabel('Predicted House Price')
plt.title('Actual vs. Predicted House Prices')
plt.legend()
plt.show()

